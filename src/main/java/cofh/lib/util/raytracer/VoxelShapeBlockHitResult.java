package cofh.lib.util.raytracer;

import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.world.phys.BlockHitResult;
import net.minecraft.world.phys.Vec3;

/**
 * Represents a RayTraceResult generated by a {@link IndexedVoxelShape} or {@link MultiIndexedVoxelShape}.
 * <p>
 * Provides easy access to the distance, as well as the {@link IndexedVoxelShape} which the ray hit.
 * <p>
 * Copied from CCL with permission :)
 * <p>
 * Created by covers1624 on 8/9/2016.
 */
public class VoxelShapeBlockHitResult extends SubHitBlockHitResult {

    public IndexedVoxelShape shape;

    public VoxelShapeBlockHitResult(BlockHitResult other, IndexedVoxelShape shape, double dist) {

        super(other.getLocation(), other.getDirection(), other.getBlockPos(), other.isInside(), shape.getData(), dist);
        this.shape = shape;
    }

    public VoxelShapeBlockHitResult(Vec3 hit, Direction side, BlockPos pos, boolean isInside, IndexedVoxelShape shape, double dist) {

        super(hit, side, pos, isInside, shape.getData(), dist);
        this.shape = shape;
    }

    public VoxelShapeBlockHitResult(Vec3 hit, Direction side, boolean isInside, IndexedVoxelShape shape, double dist) {

        super(hit, side, BlockPos.ZERO, isInside, shape.getData(), dist);
        this.shape = shape;
    }

    protected VoxelShapeBlockHitResult(boolean isMissIn, Vec3 hit, Direction side, BlockPos pos, boolean isInside, IndexedVoxelShape shape, double dist) {

        super(isMissIn, hit, side, pos, isInside, shape.getData(), dist);
        this.shape = shape;
    }

    @Override
    public SubHitBlockHitResult withDirection(Direction newFace) {

        return new VoxelShapeBlockHitResult(getType() == Type.MISS, getLocation(), newFace, getBlockPos(), isInside(), shape, dist);
    }

    public SubHitBlockHitResult getAsDistanceResult() {

        return new SubHitBlockHitResult(getType() == Type.MISS, getLocation(), getDirection(), getBlockPos(), isInside(), hitInfo, dist);
    }

    @Override
    public String toString() {

        return super.toString().replace("}", "") + ", cuboid=" + shape.toString() + "}";
    }

}
